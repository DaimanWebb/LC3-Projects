;=========================================================================
; Name & Email must be EXACTLY as in Gradescope roster!
; Name: DAIMAN WEBB
; Email: DWEBB019@UCR.EDU
; 
; Assignment name: Assignment 2
; Lab section: 021
; TA: PATEL
; 
; I hereby certify that I have not received assistance on this assignment,
; or used code, from ANY outside source other than the instruction team
; (apart from what was provided in the starter file).
;
;=========================================================================

.ORIG x3000			; Program begins here
;-------------
;Instructions
;-------------

;----------------------------------------------
;output prompt
;----------------------------------------------	
LEA R0, intro			; get starting address of prompt string
PUTS			    	; Invokes BIOS routine to output string

;-------------------------------
;INSERT YOUR CODE here
;--------------------------------

;-----------------------------------------------------------------------
;; REGISTER NOTATION
;; R0 — CHAR INPUT ASCII
;; R1 — FIRST INPUT
;; R2 — SECOND INPUT 
;; R3 — HEX_30
;; R4 — NEG_HEX_30 
;; R5 — RESULT
;; R6 — BITMASK 
;; R7 — STORING HEX_4000 PTR
;-----------------------------------------------------------------------

;; INITIALIZE
AND R1, R1, x0          ; CLEAR & INITIALIZE R2 TO 2 FOR COUNTER
AND R2, R2, x0          ; CLEAR R2 & R3
LD R6, BIT_MASK         ; LOAD BITMASK INTO R2
LD R3, HEX_30           ; LOAD BITMASK INTO R2
LD R4, NEG_HEX_30       ; LOAD R4 WITH HEX_30

;; GET INPUT FROM USER 
GETC
OUT
ADD R1, R0, x0

LD R0, newline
OUT

GETC
OUT
ADD R2, R0, x0

LD R0, newline
OUT

;; OUTPUT CURRENT EQUATION
; ADD R0, R1, x0              ; RI
; OUT                         
; LD R7, SPACE                ; SPACE
; ADD R0, R7, x0
; OUT

; LD R7, MINUS                ; MINUS
; ADD R0, R2, x0              
; OUT
; LD R7, SPACE                ; SPACE
; ADD R0, R7, x0
; OUT
; ADD R0, R2, x0              ; R2
; OUT
; LD R7, SPACE                ; SPACE
; ADD R0, R7, x0
; OUT
; OUT MINUS                   ; EQUALS
; LD R7, SPACE                ; SPACE
; ADD R0, R7, x0
; OUT

; --- ABOVE CODE WORKS, BUT IS CUMBSERSOME. BELOW IS CLEANER AND BETTER DESIGNED:
LD R7, HEX_4000             ; LOAD R7 WITH REMOTE ADDRESS

STR R1, R7, #0              ; STORE CONTENTS OF REGISTER 1
ADD R7, R7, #1

LD R6, SPACE                ; SPACE
STR R6, R7, #0
ADD R7, R7, #1

LD R6, MINUS                ; MINUS
STR R6, R7, #0
ADD R7, R7, #1

LD R6, SPACE                ; SPACE
STR R6, R7, #0
ADD R7, R7, #1

STR R2, R7, #0              ; STORE CONTENTS OF REGISTER 2
ADD R7, R7, #1

LD R6, SPACE                ; SPACE
STR R6, R7, #0
ADD R7, R7, #1

LD R6, EQUALS               ; EQUALS
STR R6, R7, #0
ADD R7, R7, #1

LD R6, SPACE                ; SPACE
STR R6, R7, #0

ADD R7, R7, #1
AND R6, R6, x0
STR R6, R7, #0              ; STORE 0 AFTER ARRAY IS FINISHED

LD R0, HEX_4000
PUTS                        ; OUTPUT:   "5 - 7 = "

;; CONVERT TO NUMBER 
ADD R1, R1, R4              ; ADD R4 (NEG_HEX_30)
ADD R2, R2, R4

;; TAKE 2'S COMPLEMENT 
NOT R2, R2
ADD R2, R2, #1
ADD R5, R1, R2

;; CHECK IF MSB == 1 BY USING A BITMASK
LD R6, BIT_MASK
AND R6, R6, R5
BRz ELSE_POSITIVE
    LD R7, MINUS                ; MINUS
    ADD R0, R7, x0              
    OUT
    NOT R5, R5                  ; 2'S COMPL. R5
    ADD R5, R5, #1
    
;; OUTPUT RESULT + NEWLINE!
ELSE_POSITIVE
;; CONVERT R5 TO ASCII 
    ADD R5, R5, R3
    ADD R0, R5, x0
    OUT 
    LD R0, NEWLINE
    OUT 

HALT				; Stop execution of program
;------	
;Data
;------
; String to prompt user. Note: already includes terminating newline!
intro 	    .STRINGZ	"ENTER two numbers (i.e '0'....'9')\n" 		; prompt string - use with LEA, followed by PUTS.
newline     .FILL x0A	; newline character - use with LD followed by OUT
HEX_30      .FILL x30
NEG_HEX_30  .FILL xFFD0
BIT_MASK    .FILL x1000
MINUS       .FILL x2D
SPACE       .FILL x20
EQUALS      .FILL x3D
HEX_4000    .FILL x4000
;---------------	
;END of PROGRAM
;---------------	
.END


;============================================================================================================
; High Level Description
; ----------------------
;   Prompt the user to input two single digit numbers
;   The second will then be subtracted from the first, and the operation reported in the console:
;       <first number> - <second number> = <difference>
;   SO if the user enters 8 and 4, these two numbers will first be echoed to the console on separate
;   lines, then the subtraction operation will be displayed:
;   Note: the user does not enter any newlines; all newlines are to be generated by the program itself.

; Low Level Breakdown
;   This assignment comprises five tasks:
;       1. Prompt the user, and read two numeric characters ('0' ... '9') from the user using Trap x20
;          (GETC). Echo the characters to the console as they are received (OUT), and store them as
;       character data in separate registers.
;       2. Output to the console the operation being performed e.g.
;       5 - 7 =
;       (how will you print the " - "? How will you print the " = "? Note the double quotes!!)
;       3. Once the setup is printed, convert the numeric characters into the actual numbers they
; represent (e.g. convert the ASCII code for ‘7’ into the binary representation of the number 7).
;       4. Perform the subtraction operation (by taking the two's complement of the second operand and
; adding), and determine the sign (+/-) of the result;
; if it is negative, determine the magnitude of the result (i.e. take the 2's complement to turn it
; back into a positive number).
;       5. Convert the resulting number back to a printable character and output it, together with a minus
; sign if necessary. Remember, the number -4 when converted to text is actually two separate
; ascii characters, '-' and '4'

; Example, with a detailed algorithm
; ● Program prompts for user input (two characters):
; ● user enters ‘5’, which is echoed to console (followed by a newline) and copied to a register.
; ● user enters ‘7’, which is echoed to console (followed by a newline) and copied to a different
; register.
; ● Program outputs the text
; 5 - 7 =
; (this will actually require at least 4 distinct output steps using OUT and PUTS)
; ● Program converts ‘5’ (ascii code) into 5 (number) and stores it back in the same register.
; ● Program converts ‘7’ into 7 and stores it back in the same register.
; ● Program takes 2's complement of 7, and stores the result back into the same register.
; ● Program adds the contents of the two registers - i.e. it performs the operation (5-7) and stores
; the result (-2) in a third register.
; ● Program recognizes that the result is negative, obtains the magnitude of -2 (= 2), and outputs '-'
; (minus sign).
; ● Program converts 2 (number) into '2' (ascii code), and stores it back in the same register.
; ● Program outputs '2' followed by a newline.
; Expected/ Sample output
; In this assignment, your output must exactly match the following, including:
; ● the prompt, followed by newline (provided in the starter code)
; ● Each digit input "echoed" and followed by a newline
; ● the subtraction operation, including spaces as shown, also followed by a newline:
;============================================================================================================
















